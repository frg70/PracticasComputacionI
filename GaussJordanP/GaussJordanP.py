# -*- coding: utf-8 -*-
"""GaussJordanP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dahlHZimGPyzR_WiExfXkw9sWGlZgI3y
"""

#Author: Fernando Ramírez González 
#Date: 19/11/21
#fer.ramirez.gon@gmail.com
#Install and import libraries 
!pip install numpy
import numpy as np 
import sys
# Reading number of unknowns
def GaussJordan():
  n = int(input("Entre el número de ecuaciones de su sistema: "))
  array = np.zeros((n,n+1))
  solution = np.zeros(n)
  for i in range(n):
    for j in range(n+1):
      array[i][j] = float(input( 'Valor de elemento: ['+str(i)+']['+ str(j)+']: '))
  for i in range(n):
    if array[i][i] == 0.0:
      sys.exit("El sistema no tiene solución")
    for j in range(n):
      if i != j: 
        ratio = array[j][i]/a[i][i]
        for k in range(n+1):
          array[j][k] = array[j][k] - ratio*array[i][k]
  for i in range(n):
    solution[i] = a[i][n]/a[i][i]                             
  print('\Solucion: ')
  for i in range(n):
    print('X%d = %0.2f' %(i,x[i]), end = '\t')

print(GaussJordan())